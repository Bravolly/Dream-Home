{
  "name": "express-print-routes",
  "version": "1.0.0",
  "description": "Prints the tree of Express routes and middlewares to a file",
  "keywords": [
    "endpoint",
    "endpoints",
    "express",
    "middleware",
    "middlewares",
    "print",
    "route",
    "routes",
    "tree"
  ],
  "homepage": "https://github.com/analog-nico/express-print-routes",
  "bugs": {
    "url": "https://github.com/analog-nico/express-print-routes/issues"
  },
  "license": "ISC",
  "author": {
    "name": "Nicolai Kamenzky",
    "url": "https://github.com/analog-nico"
  },
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/analog-nico/express-print-routes.git"
  },
  "scripts": {
    "test": "node_modules/.bin/gulp ci"
  },
  "dependencies": {
    "lodash": "^4.11.1"
  },
  "peerDependencies": {
    "express": "^4"
  },
  "engines": {
    "node": ">=4"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "chalk": "^1.1.3",
    "express": "^4",
    "gulp": "^3.9.1",
    "gulp-coveralls": "^0.1.4",
    "gulp-eslint": "^2.0.0",
    "gulp-istanbul": "^0.10.4",
    "gulp-mocha": "^2.2.0",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.2",
    "run-sequence": "^1.1.5"
  },
  "readme": "# Lost Track of All Your Express Routes And Middlewares?!\n\n`express-print-routes` prints the tree of all your [Express](http://expressjs.com) routes and middlewares to a file.\n\n**You get this** for example:\n\n```\nrouter                                                                                                         \n ├── query                            *                                                           \n ├── expressInit                      *                                                           \n ├── logger                           *                                                           \n ├── hpp                              *                                                           \n ├── router                           /^\\/api\\/?(?=\\/|$)/                                         \n │   router                                                                                                    \n │    ├── bound dispatch              /users/:id             GET\n │    │    └── __getUser              /                      GET\n │    │   \n │    └── bound dispatch              /users/:id             POST\n │         ├── __checkAccessRights    /                      POST\n │         └── __updateUser           /                      POST\n │        \n │   \n ├── serveStatic                      *                                                           \n └── __handleError                    *                                                           \n```\n\n## Installation\n\n[![Build Status](https://img.shields.io/travis/analog-nico/express-print-routes/master.svg?style=flat-square)](https://travis-ci.org/analog-nico/express-print-routes)\n[![Coverage Status](https://img.shields.io/coveralls/analog-nico/express-print-routes.svg?style=flat-square)](https://coveralls.io/r/analog-nico/express-print-routes)\n[![Dependency Status](https://img.shields.io/david/analog-nico/express-print-routes.svg?style=flat-square)](https://david-dm.org/analog-nico/express-print-routes)\n\n[![NPM Stats](https://nodei.co/npm/express-print-routes.png?downloads=true)](https://npmjs.org/package/express-print-routes)\n\nThis is a module for node.js and is installed via npm:\n\n``` bash\nnpm install express-print-routes --save-dev\n```\n\n## Usage\n\nCall `express-print-routes` after you registered all your routes / middlewares:\n\n``` js\nvar app = express();\n\n// Register all your routes / middlewares\n\n\nif (process.env.NODE_ENV === 'development') { // Only in dev environment\n\n    // Absolute path to output file\n    var path = require('path');\n    var filepath = path.join(__dirname, '../docs/routes.generated.txt');\n\n    // Invoke express-print-routes\n    require('express-print-routes')(app, filepath);\n    \n}\n```\n\nConsider giving your middlewares names when they appear as `<anonymous>`. Often, they are added as anonymous functions like this:\n\n``` js\napp.use(function (req, res, next) {\n    console.log('Hello world'!);\n    next();\n});\n```\n\nGive the middleware a name like this:\n\n``` js\napp.use(function __helloWorld(req, res, next) { // <-- '__helloWorld' will be printed now \n    console.log('Hello world'!);\n    next();\n});\n```\n\n\n### Why printing to a file and not just to the console?\n\nIt is good practice to commit the generated file to your version control system. This way you can review all changes like added / renamed / removed routes and added / removed middlewares.\n\n## Contributing\n\nTo set up your development environment for `express-print-routes`:\n\n1. Clone this repo to your desktop,\n2. in the shell `cd` to the main folder,\n3. hit `npm install`,\n4. hit `npm install gulp -g` if you haven't installed gulp globally yet, and\n5. run `gulp dev`. (Or run `node ./node_modules/.bin/gulp dev` if you don't want to install gulp globally.)\n\n`gulp dev` watches all source files and if you save some changes it will lint the code and execute all tests. The test coverage report can be viewed from `./coverage/lcov-report/index.html`.\n\nIf you want to debug a test you should use `gulp test-without-coverage` to run all tests without obscuring the code by the test coverage instrumentation.\n\n## Change History\n\n- v1.0.0 (2016-05-01)\n    - Initial version\n\n## License (ISC)\n\nIn case you never heard about the [ISC license](http://en.wikipedia.org/wiki/ISC_license) it is functionally equivalent to the MIT license.\n\nSee the [LICENSE file](LICENSE) for details.\n",
  "readmeFilename": "README.md",
  "_id": "express-print-routes@1.0.0",
  "dist": {
    "shasum": "67f2f0791ff02f7d196025fd42e4850d2d16ba1e"
  },
  "_from": "express-print-routes@^1.0.0",
  "_resolved": "https://registry.npmjs.org/express-print-routes/-/express-print-routes-1.0.0.tgz"
}
